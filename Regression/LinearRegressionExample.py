# وارد کردن کتابخانه‌های مورد نیاز
# matplotlib.pyplot: برای رسم نمودارهای بصری استفاده می‌شود.
# numpy: برای عملیات ریاضی و کار با آرایه‌های عددی.
# sklearn.datasets: برای بارگذاری مجموعه داده‌های آماده.
# sklearn.linear_model: برای استفاده از مدل‌های رگرسیون خطی.
# sklearn.metrics: برای محاسبه معیارهای ارزیابی مدل.
import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score

# بارگذاری مجموعه داده دیابت
# این داده‌ها شامل اطلاعات پزشکی بیماران و میزان پیشرفت دیابت در آن‌هاست.
# `return_X_y=True` به معنای بازگرداندن ویژگی‌ها (X) و مقادیر هدف (y) به صورت جداگانه است.
diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)

# انتخاب یک ویژگی خاص از داده‌ها
# به دلیل سادگی مثال، فقط از ستون دوم ویژگی‌ها استفاده می‌کنیم.
# np.newaxis شکل آرایه را تغییر می‌دهد تا برای پردازش آماده باشد.
diabetes_X = diabetes_X[:, np.newaxis, 2]

# تقسیم داده‌های ویژگی به دو بخش: آموزشی و آزمایشی
# داده‌های آموزشی برای یادگیری مدل و داده‌های آزمایشی برای ارزیابی دقت مدل استفاده می‌شوند.
# نمونه‌های آخر (20 نمونه) به عنوان داده‌های آزمایشی و مابقی به عنوان داده‌های آموزشی در نظر گرفته شده‌اند.
diabetes_X_train = diabetes_X[:-20]  # داده‌های آموزشی شامل همه نمونه‌ها به جز 20 نمونه آخر
diabetes_X_test = diabetes_X[-20:]  # داده‌های آزمایشی شامل 20 نمونه آخر

# تقسیم مقادیر هدف (برچسب‌ها) به دو بخش: آموزشی و آزمایشی
# مقادیر هدف مرتبط با داده‌های ویژگی به صورت مشابه تقسیم می‌شوند.
diabetes_y_train = diabetes_y[:-20]  # مقادیر هدف مربوط به داده‌های آموزشی
diabetes_y_test = diabetes_y[-20:]  # مقادیر هدف مربوط به داده‌های آزمایشی

# ایجاد شیء مدل رگرسیون خطی
# این مدل یک رابطه خطی بین ویژگی‌ها و مقادیر هدف را می‌آموزد.
regr = linear_model.LinearRegression()

# آموزش مدل با استفاده از داده‌های آموزشی
# این مرحله شامل محاسبه ضرایب خطی (weights) است که بهترین برازش را برای داده‌ها ایجاد می‌کنند.
regr.fit(diabetes_X_train, diabetes_y_train)

# استفاده از مدل برای پیش‌بینی مقادیر هدف در داده‌های آزمایشی
# مقادیر پیش‌بینی‌شده (diabetes_y_pred) توسط مدل ذخیره می‌شوند.
diabetes_y_pred = regr.predict(diabetes_X_test)

# چاپ ضرایب مدل
# این ضرایب نشان می‌دهند که هر ویژگی چقدر در تعیین مقدار هدف تأثیر دارد.
print("Coefficients: \n", regr.coef_)

# محاسبه و چاپ خطای میانگین مربعات
# خطای میانگین مربعات نشان‌دهنده میانگین تفاوت‌های بین مقادیر واقعی و مقادیر پیش‌بینی‌شده است.
# مقدار کمتر نشان‌دهنده دقت بیشتر مدل است.
print("Mean squared error: %.2f" % mean_squared_error(diabetes_y_test, diabetes_y_pred))

# محاسبه و چاپ ضریب تعیین (R^2)
# ضریب تعیین نشان‌دهنده میزان واریانس توضیح داده‌شده توسط مدل است.
# مقدار 1 نشان‌دهنده برازش کامل است.
print("Coefficient of determination: %.2f" % r2_score(diabetes_y_test, diabetes_y_pred))

# رسم نمودار خروجی‌ها
# نمودار شامل داده‌های واقعی (نقاط سیاه) و مقادیر پیش‌بینی‌شده توسط مدل (خط آبی) است.
plt.scatter(diabetes_X_test, diabetes_y_test, color="black", label="Actual Data")  # نقاط واقعی
plt.plot(diabetes_X_test, diabetes_y_pred, color="blue", linewidth=3, label="Predicted Line")  # خط پیش‌بینی

# حذف مقادیر محورهای x و y
# این کار برای ساده‌تر کردن نمودار انجام می‌شود.
plt.xticks(())  # حذف برچسب‌های محور x
plt.yticks(())  # حذف برچسب‌های محور y

# اضافه کردن راهنمای نمودار برای شناسایی داده‌های واقعی و پیش‌بینی‌شده
plt.legend()

# نمایش نمودار
plt.show()
